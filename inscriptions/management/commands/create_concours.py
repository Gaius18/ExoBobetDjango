from django.core.management.base import BaseCommand
from inscriptions.models import Concours
from datetime import date, timedelta

class Command(BaseCommand):
    help = 'Cr√©er les concours ESATIC par d√©faut'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üéØ Cr√©ation des concours ESATIC...'))
        
        concours_list = [
            {
                'nom': 'Concours d\'entr√©e en 1√®re ann√©e - Cycle Ing√©nieur',
                'niveau_requis': 'BAC',
                'description': 'Formation d\'ing√©nieur en t√©l√©communications et r√©seaux. Programme de 5 ans pour former des ing√©nieurs capables de concevoir, d√©ployer et maintenir des infrastructures de t√©l√©communications modernes.',
                'frais_inscription': 25000,
                'date_limite': date.today() + timedelta(days=30),
                'actif': True
            },
            {
                'nom': 'Concours Bachelier en Informatique et T√©l√©communications',
                'niveau_requis': 'BACHELIER',
                'description': 'Formation de niveau bachelier sp√©cialis√©e en informatique et t√©l√©communications. Programme de 3 ans orient√© vers les technologies de l\'information et de la communication.',
                'frais_inscription': 20000,
                'date_limite': date.today() + timedelta(days=40),
                'actif': True
            },
            {
                'nom': 'Concours d\'entr√©e en 3√®me ann√©e - Cycle Ing√©nieur',
                'niveau_requis': 'BAC+2',
                'description': 'Admission directe en 3√®me ann√©e du cycle ing√©nieur pour les titulaires d\'un BTS, DUT ou √©quivalent en √©lectronique, informatique ou t√©l√©communications.',
                'frais_inscription': 30000,
                'date_limite': date.today() + timedelta(days=25),
                'actif': True
            },
            {
                'nom': 'Concours Analyste Statisticien - Niveau Bac+2',
                'niveau_requis': 'BAC+2',
                'description': 'Formation sp√©cialis√©e en analyse statistique et traitement de donn√©es pour les secteurs public et priv√©. Programme ax√© sur les m√©thodes quantitatives et l\'analyse de donn√©es.',
                'frais_inscription': 20000,
                'date_limite': date.today() + timedelta(days=35),
                'actif': True
            },
            {
                'nom': 'Master en Data Science et Intelligence Artificielle',
                'niveau_requis': 'BAC+3',
                'description': 'Formation avanc√©e en science des donn√©es, machine learning et intelligence artificielle. Programme orient√© vers la recherche et l\'innovation technologique.',
                'frais_inscription': 35000,
                'date_limite': date.today() + timedelta(days=20),
                'actif': True
            },
            {
                'nom': 'Master en Cybers√©curit√© et R√©seaux',
                'niveau_requis': 'BAC+3',
                'description': 'Sp√©cialisation en s√©curit√© informatique, audit de s√©curit√©, gestion des risques cyber et protection des infrastructures num√©riques.',
                'frais_inscription': 35000,
                'date_limite': date.today() + timedelta(days=15),
                'actif': True
            }
        ]
        
        created_count = 0
        existing_count = 0
        
        for concours_data in concours_list:
            concours, created = Concours.objects.get_or_create(
                nom=concours_data['nom'],
                defaults=concours_data
            )
            
            if created:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Cr√©√©: {concours.nom}')
                )
                created_count += 1
            else:
                self.stdout.write(
                    self.style.WARNING(f'‚ÑπÔ∏è  Existe d√©j√†: {concours.nom}')
                )
                existing_count += 1
        
        self.stdout.write(
            self.style.SUCCESS(f'\nüìä R√©sum√©:')
        )
        self.stdout.write(f'   - Concours cr√©√©s: {created_count}')
        self.stdout.write(f'   - Concours existants: {existing_count}')
        self.stdout.write(f'   - Total: {Concours.objects.count()}')
        
        self.stdout.write(
            self.style.SUCCESS(f'\nüéâ Concours disponibles:')
        )
        for concours in Concours.objects.filter(actif=True):
            self.stdout.write(f'   - {concours.nom} ({concours.get_niveau_requis_display()})')
        
        self.stdout.write(
            self.style.SUCCESS('\n‚úÖ Concours cr√©√©s avec succ√®s!')
        )